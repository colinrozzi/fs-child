                        Err(e) => {
                            log(&format!("Error loading message: {}", e));
                            let response = ChildMessage {
                                child_id: child_id.clone(),
                                text: format!("❌ Failed to load message: {}", e),
                                data: json!({"head": head}),
                            };
                            return (
                                serde_json::to_vec(&response).unwrap(),
                                serde_json::to_vec(&current_state).unwrap(),
                            );
                        }
                    }
                }

                // Default to empty response if no commands were found or missing IDs
                let response = ChildMessage {
                    child_id: current_state.child_id.clone().unwrap_or_default(),
                    text: String::new(),
                    data: json!({}),
                };

                (
                    serde_json::to_vec(&response).unwrap(),
                    serde_json::to_vec(&current_state).unwrap(),
                )
            }
            Some(other) => {
                log(&format!("Unknown message type: {}", other));
                let response = ChildMessage {
                    child_id: current_state.child_id.clone().unwrap_or_default(),
                    text: format!("❓ Unknown message type: {}", other),
                    data: json!({}),
                };
                (
                    serde_json::to_vec(&response).unwrap(),
                    serde_json::to_vec(&current_state).unwrap(),
                )
            }
            None => {
                log("No message type provided");
                let response = ChildMessage {
                    child_id: current_state.child_id.clone().unwrap_or_default(),
                    text: "❌ No message type provided".to_string(),
                    data: json!({}),
                };
                (
                    serde_json::to_vec(&response).unwrap(),
                    serde_json::to_vec(&current_state).unwrap(),
                )
            }
        }
    }

    fn handle_send(msg: Json, state: Json) -> Json {
        state
    }
}

bindings::export!(Component with_types_in bindings);